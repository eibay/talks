JSON
The Fine Print

Miki Tebeka
CEO, 353solutions
miki@353solutions.com
@tebeka
https://github.com/tebeka/talks/tree/master/fosdem22

* Serialization

Convert data structures in Go to a sequence of bytes and back.
Usually done at the "edges" of your program.

.image serialization.png

* JSON

A popular _textual_ serialization format

Has the following types:

- Number -> int*, uint*, float*, big.Int, big.Float (default `float64`)
- String -> `string`
- Array -> `slice`
- Boolean -> `bool`
- null -> `nil`
- Object -> struct or `map[string]interface{}`

* Size

.play size.go /START_MAIN/,/END_MAIN/

* Numbers

.play -edit int.go

* Time

.code payment.go  /START_PAYMENT/,/END_PAYMENT/

.play payment.go  /START_MAIN/,/END_MAIN/

*

.image wile.jpg

* json.Marshaler

.image marshaler.jpg

`src/time/time.go`

.code tmarsh.go /START/,/END/

* Custom Time

.code payment_fmt.go /START_PTIME/,/END_PTIME/

* Custom Time - Payment

.code payment_fmt.go /START_PAYMENT/,/END_PAYMENT/

.play payment_fmt.go /START_MAIN/,/END_MAIN/

* Custom Time - Limitation

.play -edit payment_fmt_limit.go /START_MAIN/,/END_MAIN/

# * Value
# 
# .code value.go /START_VALUE/,/END_VALUE/
# 
# {15.4, Celcius} -> 15.4c
# 
# * Value - MarshalJSON
# 
# .code value.go /START_MJ/,/END_MJ/
# 
# .play value.go /START_MAIN/,/END_MAIN/
 
* Binary Data

.code img.go /START_IMAGE/,/END_IMAGE/

.play img.go /START_MAIN/,/END_MAIN/

* Tags

.play -edit payment_tags.go  /START_PAYMENT/,/END_PAYMENT/

* Streaming Input

.code stream_in.go /START_EVENT/,/END_EVENT/

.play stream_in.go /START_MAIN/,/END_MAIN/

* Streaming Output

.play stream_out.go /START_MAIN/,/END_MAIN/

.code stream.py

* Chunked Transfer Encoding

Chunked transfer encoding is a streaming data transfer mechanism available in version 1.1 of the Hypertext Transfer Protocol (HTTP). - [[https://en.wikipedia.org/wiki/Chunked_transfer_encoding][Wikipedia]]

Example: [[https://robpike.io][robpike.io]]

.code req.txt

* Chunking Example - HTTP Handler

.code chunks.go /BEGIN_HANDLER/,/END_HANDLER/

* Chunking Example - Request

.code chunk_req.txt

* Missing Values

.code payment_missing.go  /START_PAYMENT/,/END_PAYMENT/

.play payment_missing.go  /START_MAIN/,/END_MAIN/

* Missing Values - Pointers

.code payment_missing_ptr.go  /START_PAYMENT/,/END_PAYMENT/

.play payment_missing_ptr.go  /START_MAIN/,/END_MAIN/

* Missing Values - mapstructure

.code payment_missing_ms.go  /START_MAIN/,/END_MAIN/

* Missing Values - Defaults

.play payment_missing_default.go  /START_MAIN/,/END_MAIN/

* Valid JSON < Valid Data

.code loc.go /START_LOC/,/END_LOC/

.play loc.go  /START_MAIN/,/END_MAIN/

* Validate

.code loc_valid.go /START_VALIDATE/,/END_VALIDATE/

.play loc_valid.go  /START_MAIN/,/END_MAIN/

* Strings

.play -edit str.go  /START_MAIN/,/END_MAIN/

* Type Pollution

.code stocks.txt

* Anonymous Struct to the Resuce

.play stocks.go /START_PARSE/,/END_PARSE/
