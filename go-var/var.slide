What's in a Name?
Variable Scope & Closure

Miki Tebeka
CEO, 353solutions
miki@353solutions.com
@tebeka

https://github.com/tebeka/talks/tree/master/go-var

* Miki Tebeka

.image 353.png

* Quiz: Sleep Sort

.play -edit -numbers sleep_sort.go /START/,/END/

Will this compile? What will it print?

* Mean

.code -edit -numbers mean.go /START_SCALE/,/END_SCALE/
# .play -numbers mean.go /START_MAIN/,/END_MAIN/

- `sum` - function/local
- `float64` - builtin (universe)
- `len` - builtin (universe)
- `values` - parameter (function/local)
- `scale` - global (package)

* Blocks

.image go-blocks.jpg

[[https://golang.org/ref/spec#Blocks]]

* Implicit Blocks

.play -edit -numbers scope.go /START/,/END/

* Scope

.image go-scope.jpg

* Scope

.code -edit -numbers mean.go /START_RET/,/END_RET/

.image scope.svg

[[https://golang.org/ref/spec#Declarations_and_scope]]

* builtin

.image builtin.jpg

[[https://pkg.go.dev/builtin#pkg-index]]

* Closure

.code -edit -numbers sleep_sort_hl.go /START/,/END/

[[https://golang.org/ref/spec#Function_literals]]

Function literals are closures: they may refer to variables defined in a surrounding function. Those variables are then shared between the surrounding function and the function literal, and they survive as long as they are accessible.


* Sleep Sort - Fix 1

.play -edit -numbers sleep_sort_fix1.go /START/,/END/

* Sleep Sort - Fix 2

.play -edit -numbers sleep_sort_fix2.go /START/,/END/

* A Bank Account

.code -edit -numbers account.go /START/,/END/
.play -edit -numbers account.go /MAIN_START/,/MAIN_END/


* Middleware

.code -edit -numbers metrics.go /START/,/END/
.code -edit -numbers metrics.go /START_MAIN/,/END_MAIN/

* errgroup

.image errgroup.png

.code -edit -numbers errg.go /START/,/END/

[[https://pkg.go.dev/golang.org/x/sync/errgroup#Group.Go]]

* Named Result Parameters

.code -edit -numbers panic.go /START/,/END/
.play -edit -numbers panic.go /MAIN_START/,/MAIN_END/

* spit

.code -edit -numbers spit.go /START/,/END/
.play -edit -numbers spit.go /MAIN_START/,/MAIN_END/

* spit - A Fix

.code -edit -numbers spit_fix.go /START/,/END/
.play -edit -numbers spit_fix.go /MAIN_START/,/MAIN_END/

* spit - With Error

.code -edit -numbers spit_err.go /START/,/END/
.play -edit -numbers spit_err.go /MAIN_START/,/MAIN_END/

* spit - With No Error

# .code -numbers spit_err_fix.go /IMP_START/,/IMP_END/
.code -edit -numbers spit_err_fix.go /SPIT_START/,/SPIT_END/
# .play -numbers spit_err_fix.go /MAIN_START/,/MAIN_END/

[[https://go.uber.org/multierr]]

* Quiz: init

.play -edit -numbers init.go /START/,/END/

Will this compile? What will it print?

* init

.image init.jpg

[[https://golang.org/ref/spec#Package_initialization]]


* Quiz: Multi Assign

.play -edit -numbers multi_assign.go /START/,/END/

Will this compile? What will it print?

* Slices

.code -edit -numbers slice.go /START/,/END/

* append

.code -edit -numbers append.go /APPEND_START/,/APPEND_END/
.play -edit -numbers append.go /MAIN_START/,/MAIN_END/

[[https://golang.org/src/runtime/slice.go]]

In a function call, the function value and arguments are evaluated in the usual order. After they are evaluated, the parameters of the call are passed *by* *value* to the function and the called function begins execution. The return parameters of the function are passed by value back to the caller when the function returns.

[[https://golang.org/ref/spec#Calls]]

* append - Fix

.code -edit -numbers append_fix.go /APPEND_START/,/APPEND_END/
.play -edit -numbers append_fix.go /MAIN_START/,/MAIN_END/

* median

.code -edit -numbers median.go /MEDIAN_START/,/MEDIAN_END/
.play -edit -numbers median.go /MAIN_START/,/MAIN_END/

* median - Fix

.code -edit -numbers median_fix.go /MEDIAN_START/,/MEDIAN_END/
.play -edit -numbers median_fix.go /MAIN_START/,/MAIN_END/
